generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id   Int    @id @default(autoincrement())
  name String
}

model documents {
  document_id  Int      @id @default(autoincrement())
  header_text  String   @db.VarChar(255)
  posting_date DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model cities {
  name       String @db.VarChar(50)
  country    String @db.VarChar(255)
  population Int
  area       Int

  @@ignore
}

model Post {
  id          Int    @id @default(autoincrement())
  tag         String @db.Char(5)
  title       String @db.VarChar(255)
  description String @db.VarChar(255)
  content     String
}

model bool {
  id             Int      @id @default(autoincrement())
  is_ok          Boolean? @default(false)
  inserted_value String?  @db.VarChar(50)
}

model non_null_bool {
  id    Int     @id @default(autoincrement())
  is_ok Boolean
}

model char {
  id                    Int     @id @default(autoincrement())
  char                  String? @db.Char(5)
  varchar               String? @db.VarChar(10)
  text                  String?
  varchar_without_limit String? @db.VarChar
  char_without_limit    String? @db.Char(1)
}

model numeric {
  id     Int      @id @default(autoincrement())
  price  Decimal? @db.Decimal(5, 2)
  price2 Decimal? @db.Decimal(5, 0)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model int {
  id                 Int    @id @default(autoincrement())
  small_int          Int    @default(0) @db.SmallInt
  int                Int    @default(0)
  big_int            BigInt @default(0)
  positive_small_int Int    @default(1) @db.SmallInt
  non_negative_int   Int    @default(0)
  negative_big_int   BigInt @default(-1)
}

model date {
  id   Int      @id @default(autoincrement())
  date DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
}

model employee {
  id         Int      @id @default(autoincrement())
  name       String?  @db.VarChar(10)
  birth_date DateTime @db.Date
  hire_date  DateTime @db.Date
}

model timestamp {
  id   Int       @id @default(autoincrement())
  ts   DateTime? @db.Timestamp(6)
  tstz DateTime? @db.Timestamptz(6)
}

model table_name {
  id Int @id @default(autoincrement())
}

model serial {
  id           Int    @id @default(autoincrement())
  small_serial Int    @default(autoincrement()) @db.SmallInt
  big_serial   BigInt @default(autoincrement())
}

model interval {
  id       Int                      @id @default(autoincrement())
  name     String?                  @db.VarChar(10)
  interval Unsupported("interval")?
}

model shifts {
  id         Int      @id @default(autoincrement())
  shift_name String   @db.VarChar
  start_at   DateTime @db.Time(6)
  end_at     DateTime @db.Time(6)
}

model time {
  id    Int       @id @default(autoincrement())
  time  DateTime? @default(dbgenerated("CURRENT_TIME")) @db.Time(6)
  time2 DateTime? @db.Time(6)
}

model uuid {
  id   String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name String? @db.VarChar(10)
}

model json {
  id   Int  @id @default(autoincrement())
  json Json @db.Json
}

model books {
  id    Int                    @id @default(autoincrement())
  title String?                @db.VarChar(255)
  attr  Unsupported("hstore")?
}

model array {
  id         Int      @id @default(dbgenerated("nextval('_array_id_seq'::regclass)"))
  text_array String[]
  char_array String[] @db.Char(1)
  num_array  Int[]
  json_array Json[]   @db.Json

  @@map("_array")
}

model comments {
  id       Int     @id @default(autoincrement())
  contents String? @db.VarChar(240)
  user_id  Int?
  photo_id Int?
  photos   photos? @relation(fields: [photo_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users    users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model photos {
  id       Int        @id @default(autoincrement())
  url      String?    @db.VarChar(200)
  user_id  Int?
  comments comments[]
  users    users?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id       Int        @id @default(autoincrement())
  username String?    @db.VarChar(50)
  comments comments[]
  photos   photos[]
}
